#!/bin/sh
<%# coding: UTF-8%>
# Auto-generated by Chef, do not edit!
### BEGIN INIT INFO
# Provides: <%= @name %>
# Short-Description: <%= @name %> server
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
### END INIT INFO

USER=<%= node["confluent"]["user"] %>
SLEEP_TIME=5
CURRENT_WAIT=0
TIMEOUT=60
BIN_DIR=<%= node["confluent"]["install_dir"] %>/confluent-<%= node["confluent"]["version"] %>/bin
NAME=<%= @name %>
SCRIPT=<%= @script %>
CLASS=<%= @class %>

# We have to pipe STDOUT here otherwise it will print logs when running script
START_SERVER_CMD="$BIN_DIR/$SCRIPT-start /etc/$NAME/<%= @properties_file %> 2> /var/log/confluent/$NAME-service.out &"

# We have to pipe STDOUT here otherwise it will print logs when running script
STOP_SERVER_CMD="$BIN_DIR/$SCRIPT-stop 2> /var/log/confluent/$NAME-service.out"

# Application environment variables
<% @env_vars.each do |k, v| -%>
export <%= k %>="<%= v %>"
<% end -%>

##For Kafka Monitoring
KAFKA_PIDFILE=<%= node["confluent"]["pid_dir"] %>/$NAME.pid

start() {
  findPid

  if [ "" = "$FOUND_PID" ]; then
    su --shell=/bin/sh $USER -c "$START_SERVER_CMD"

    if [ $? -ne 0 ]; then
      echo "Error starting $NAME"
      exit 1
    fi

    echo "$NAME successfully started"

  else
    echo "$NAME is already running"
  fi
  #Generating PID File
  sleep $SLEEP_TIME
  findPid
  echo $FOUND_PID >$KAFKA_PIDFILE
}

stop() {
  findPid

  if [ "" = "$FOUND_PID" ]; then
    echo "$NAME is not running"
  else
    while [ -n "$FOUND_PID" ];
    do
      echo "Attempting to shutdown $NAME..."
       su --shell=/bin/sh $USER -c "$STOP_SERVER_CMD"

      if [ $? -ne 0 ]; then
        echo "Error stopping $NAME"
        exit 1
      fi

      sleep $SLEEP_TIME
      CURRENT_WAIT=$(($CURRENT_WAIT+$SLEEP_TIME))

      if [ $CURRENT_WAIT -gt $TIMEOUT ]; then
        echo "Timed out waiting for $NAME to stop"
        exit 1
      fi

      findPid
    done
  fi
  #Removing PID File
  rm -f $KAFKA_PIDFILE
}

status() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "$NAME is not running" ; exit 1
  else
    echo "$NAME is running : $FOUND_PID"
  fi
}

findPid() {
  FOUND_PID=`pgrep -u $USER -f $CLASS`
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0
